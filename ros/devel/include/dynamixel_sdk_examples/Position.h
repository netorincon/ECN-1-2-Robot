// Generated by gencpp from file dynamixel_sdk_examples/Position.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_SDK_EXAMPLES_MESSAGE_POSITION_H
#define DYNAMIXEL_SDK_EXAMPLES_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_sdk_examples
{
template <class ContainerAllocator>
struct Position_
{
  typedef Position_<ContainerAllocator> Type;

  Position_()
    : id()
    , position()  {
    }
  Position_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _id_type;
  _id_type id;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::dynamixel_sdk_examples::Position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_sdk_examples::Position_<ContainerAllocator> const> ConstPtr;

}; // struct Position_

typedef ::dynamixel_sdk_examples::Position_<std::allocator<void> > Position;

typedef boost::shared_ptr< ::dynamixel_sdk_examples::Position > PositionPtr;
typedef boost::shared_ptr< ::dynamixel_sdk_examples::Position const> PositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_sdk_examples::Position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_sdk_examples::Position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamixel_sdk_examples::Position_<ContainerAllocator1> & lhs, const ::dynamixel_sdk_examples::Position_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamixel_sdk_examples::Position_<ContainerAllocator1> & lhs, const ::dynamixel_sdk_examples::Position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamixel_sdk_examples

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dynamixel_sdk_examples::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_sdk_examples::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_sdk_examples::Position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_sdk_examples::Position_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_sdk_examples::Position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_sdk_examples::Position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_sdk_examples::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d1d43c65af5558fb9b71be9651e4d8b";
  }

  static const char* value(const ::dynamixel_sdk_examples::Position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d1d43c65af5558fULL;
  static const uint64_t static_value2 = 0xb9b71be9651e4d8bULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_sdk_examples::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_sdk_examples/Position";
  }

  static const char* value(const ::dynamixel_sdk_examples::Position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_sdk_examples::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] id\n"
"int32[] position\n"
;
  }

  static const char* value(const ::dynamixel_sdk_examples::Position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_sdk_examples::Position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_sdk_examples::Position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_sdk_examples::Position_<ContainerAllocator>& v)
  {
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_SDK_EXAMPLES_MESSAGE_POSITION_H
